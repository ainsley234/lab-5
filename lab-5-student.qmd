---
title: "Lab 5: Murder in SQL City"
author: "Ainsley Forster!"
format: html
editor: source
embed-resources: true
---

For this lab, you will be joining and filtering related datasets to solve a murder mystery!

## Instructions

Northwestern University's Knight Lab wanted to help sharpen users' database skills, so they created a murder mystery. Can you solve this crime in SQL City??

The relational data you will be working with contains tables with different pieces of information pertinent to the crime - people, social media check-ins, driver's licenses, crime scene reports, police interviews, and more!

![Database schema](https://mystery.knightlab.com/schema.png)

Solve the murder mystery, showing **all of your work in this document**. Your document and code must be well organized, easy to follow, and reproducible.

+ Use headers and written descriptions to indicate what you are doing.
+ Use `dplyr` verbs and `join` functions rather than just looking through the tables manually.
+ Use good code formatting practices.
+ Comment your code.
+ Cite any external sources you use to solve the mystery.

### Tips 

You may find the `pull()` function handy for displaying each clue as you go along.


## Access the Data

This code chunk will read in all of the tables of data for you. Don't modify or remove this!

```{r}
#| message: false
#| warning: false
#| label: read-in-data

library(tidyverse)

# If purrr is not detected, install the package
if (!"purrr" %in% installed.packages()) install.packages("purrr")

source("https://raw.githubusercontent.com/atheobold/groupworthy-data-science/main/labs/instructions/lab-5-setup.R")
```

## Solve the Crime

### Crime Scene Report

Detective Wickham reaches out to you...

> A crime has taken place and I need your help! There was a murder in SQL City sometime on January 15, 2018. Could you retrieve the crime scene report from the police departmentâ€™s database and follow the clues to find the person responsible for the murder?!

```{r}
#| label: inspecting-crime-scene-report

relevant_report <- crime_scene_report |>
  filter(city == "SQL City",
         type == "murder")

```


**Follow the evidence to the person responsible for the murder, building a report as you go.**
Hint: Make sure you check for interviews with any suspects!


```{r}
#| label: finding-witness-IDs

witness_ID_1 <- person |>
  filter(address_street_name == "Northwestern Dr",
         address_number == max(address_number)) |>
         pull(id)

witness_ID_2 <- person |>
  filter(address_street_name == "Franklin Ave",
         str_detect(name, "Annabel")) |>
         pull(id)

```


```{r}
#| label: retrieving-interviews

interview_1 <- interview |>
  filter(person_id == witness_ID_1) |>
  pull(transcript)

print(interview_1)

interview_2 <- interview |>
  filter(person_id == witness_ID_2) |>
  pull(transcript)

print(interview_2)


```


```{r}
#| label: sorting-gym-information 
# membership number on the bag started with \"48Z\"
# gold member
# working out January the 9th

filter_by_gym_id <- get_fit_now_member |>
  full_join(get_fit_now_check_in, by = c("id" = "membership_id")) |>
  filter(membership_status == "gold",
         check_in_date == "20180109",
         str_detect(id, "^48Z"))

```


```{r}
#| label: sorting-licence-plate-information 
# plate that included \"H42W\"." 

filter_by_licence <- person |>
  semi_join(filter_by_gym_id, by = c("id" = "person_id")) |>
  left_join(drivers_license, by = c("license_id" = "id")) |>
  filter(str_detect(plate_number, "H42W"))

```


## And the final suspect is...

*Put the name of the person responsible for the murder here:*
